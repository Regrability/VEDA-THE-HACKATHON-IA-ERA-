from gpt4all import GPT4All
import os
import time

def log(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    print(f"[{time.strftime('%H:%M:%S')}] {message}")

def download_model():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    log("üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å...")

    models_to_try = [
        "orca-mini-3b.ggmlv3.q4_0.bin",
        "mistral-7b-openorca.ggmlv3.q4_0.bin", 
        "gpt4all-falcon-newbpe-q4_0.gguf",
        "orca-2-7b.Q4_0.gguf"
    ]

    for model_name in models_to_try:
        try:
            log(f"üîÑ –ü—Ä–æ–±—É–µ–º: {model_name}")
            GPT4All(model_name)  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
            log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞: {model_name}")
            return model_name  # –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {model_name}: {e}")
    
    log("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ —Å–∫–∞—á–∞–Ω–∞.")
    return None


def check_existing_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏"""
    models_dir = os.path.expanduser("~/.cache/gpt4all")
    log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –º–æ–¥–µ–ª–µ–π: {models_dir}")

    if os.path.exists(models_dir):
        models = os.listdir(models_dir)
        if models:
            log("üìã –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏:")
            for model in models:
                print(f"  - {model}")
            return models
        else:
            log("‚ö†Ô∏è –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ ‚Äî –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç.")
    else:
        log("‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    return []

if __name__ == "__main__":
    log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ download_model.py")
    existing_models = check_existing_models()

    if not existing_models:
        log("üì¶ –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        download_model()
    else:
        log("‚úÖ –ú–æ–¥–µ–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å assistant_core.py")
