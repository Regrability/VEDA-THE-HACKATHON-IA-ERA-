from flask import Flask, request, jsonify, render_template, session, redirect, url_for
from flask_cors import CORS
import os
import sys
import json
import tempfile
from datetime import datetime
import hashlib
import secrets
from functools import wraps

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
try:
    from finr import AIAssistant, get_document_data, get_doc_full_name
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ finr: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class AIAssistant:
        def __init__(self):
            self.kb = type('obj', (object,), {
                'documents': [
                    {'question': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 1', 'answer': '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç 1', 'source_file': 'test1.txt'},
                    {'question': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 2', 'answer': '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç 2', 'source_file': 'test2.txt'}
                ],
                'add_document_from_file': lambda x: print(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {x}"),
                'build_index': lambda: print("–ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω"),
                'search': lambda query, top_k, method: [
                    {'question': '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞', 'answer': '–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç', 'similarity_score': 0.8, 'source_file': 'search_result.txt'}
                ]
            })()
            self.generator = type('obj', (object,), {
                'create_document': lambda doc_type, data: print(f"–°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç {doc_type}"),
                'save_document': lambda filename: print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            })()
        
        def setup_knowledge_base(self, path):
            print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ {path}")
            
        def ask(self, question, use_llm=False):
            return {
                'answer': f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}',
                'sources': [{'source': 'test.txt', 'page': 1}],
                'confidence': 0.8
            }
        
        def get_statistics(self):
            return {
                'total_documents': len(self.kb.documents),
                'has_llm': True,
                'docx_available': True,
                'has_embeddings': True
            }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, template_folder='.')
app.secret_key = 'your-secret-key-change-in-production'  # –ò–∑–º–µ–Ω–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant = None

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î)
users = {
    'admin': {
        'password': '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8',  # password
        'role': 'admin',
        'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    },
    'user': {
        'password': '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8',  # password
        'role': 'user',
        'name': '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }
}

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def login_required(role='user'):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–æ–ª–∏"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if 'user_id' not in session:
                return jsonify({'status': 'error', 'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401
            
            user_role = session.get('role', 'user')
            if role == 'admin' and user_role != 'admin':
                return jsonify({'status': 'error', 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def initialize_assistant():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    global assistant
    try:
        assistant = AIAssistant()
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        try:
            documents_path = "./documents"
            if not os.path.exists(documents_path):
                os.makedirs(documents_path, exist_ok=True)
                print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ documents")
            
            assistant.setup_knowledge_base(documents_path)
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return False

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    if 'user_id' in session:
        user_role = session.get('role', 'user')
        return render_template('index.html', user=session, user_role=user_role)
    return redirect(url_for('login_page'))

@app.route('/login')
def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    if 'user_id' in session:
        return redirect(url_for('index'))
    return render_template('login.html')

@app.route('/api/login', methods=['POST'])
def login():
    """API –¥–ª—è –≤—Ö–æ–¥–∞"""
    try:
        data = request.get_json()
        username = data.get('username', '').strip()
        password = data.get('password', '').strip()
        
        if not username or not password:
            return jsonify({
                'status': 'error',
                'message': '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            })
        
        user = users.get(username)
        if user and user['password'] == hash_password(password):
            session['user_id'] = username
            session['role'] = user['role']
            session['name'] = user['name']
            
            return jsonify({
                'status': 'success',
                'data': {
                    'username': username,
                    'role': user['role'],
                    'name': user['name']
                }
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            })
            
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}'
        })

@app.route('/api/logout', methods=['POST'])
def logout():
    """API –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
    session.clear()
    return jsonify({
        'status': 'success',
        'message': '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω'
    })

@app.route('/api/status')
@login_required()
def get_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        stats = assistant.get_statistics()
        user_role = session.get('role', 'user')
        return jsonify({
            'status': 'success',
            'data': {
                'assistant_ready': True,
                'documents_count': stats['total_documents'],
                'llm_available': stats['has_llm'],
                'docx_available': stats['docx_available'],
                'index_built': stats['has_embeddings'],
                'user_role': user_role,
                'is_admin': user_role == 'admin'
            }
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        })

@app.route('/api/ask', methods=['POST'])
@login_required()
def ask_question():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        data = request.get_json()
        question = data.get('question', '').strip()
        use_llm = data.get('use_llm', False)
        
        if not question:
            return jsonify({
                'status': 'error',
                'message': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        result = assistant.ask(question, use_llm=use_llm)
        
        return jsonify({
            'status': 'success',
            'data': {
                'answer': result['answer'],
                'sources': result['sources'],
                'confidence': result['confidence'],
                'timestamp': datetime.now().isoformat()
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}'
        })

@app.route('/api/search', methods=['POST'])
@login_required()
def search_documents():
    """–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        method = data.get('method', 'combined')
        top_k = data.get('top_k', 5)
        
        if not query:
            return jsonify({
                'status': 'error',
                'message': '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            })
        
        results = assistant.kb.search(query, top_k=top_k, method=method)
        
        formatted_results = []
        for result in results:
            formatted_results.append({
                'question': result.get('question', ''),
                'answer': result.get('answer', '')[:200] + '...' if len(result.get('answer', '')) > 200 else result.get('answer', ''),
                'document': result.get('document', ''),
                'link': result.get('link', ''),
                'similarity_score': result.get('similarity_score', 0),
                'source_file': result.get('source_file', '')
            })
        
        return jsonify({
            'status': 'success',
            'data': {
                'results': formatted_results,
                'count': len(results),
                'query': query
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'
        })

@app.route('/api/generate-document', methods=['POST'])
@login_required()
def generate_document():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        data = request.get_json()
        doc_type = data.get('doc_type', '–¢–ó')
        document_data = data.get('data', {})
        format_type = data.get('format', 'txt')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç

        print(f"üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞: {doc_type}")
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {document_data}")
        print(f"üìù –§–æ—Ä–º–∞—Ç: {format_type}")

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        content = generate_text_document(doc_type, document_data)
        
        if format_type == 'docx':
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å DOCX
                from docx import Document
                
                doc = Document()
                doc.add_heading(f'{doc_type}: {document_data.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")}', 0)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                lines = content.split('\n')
                for line in lines:
                    if line.strip():
                        if line.strip().isupper() and len(line.strip()) > 10:
                            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                            doc.add_heading(line.strip(), level=1)
                        else:
                            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                            doc.add_paragraph(line.strip())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as tmp_file:
                    filename = tmp_file.name
                    doc.save(filename)
                
                return jsonify({
                    'status': 'success',
                    'data': {
                        'filename': os.path.basename(filename),
                        'format': 'docx',
                        'download_url': f'/api/download/{os.path.basename(filename)}',
                        'message': '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'
                    }
                })
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                return jsonify({
                    'status': 'success',
                    'data': {
                        'content': content,
                        'format': 'txt',
                        'message': 'DOCX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç'
                    }
                })
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            return jsonify({
                'status': 'success',
                'data': {
                    'content': content,
                    'format': 'txt'
                }
            })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'
        })

def generate_text_document(doc_type, data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if doc_type == '–¢–ó':
        return generate_tz_document(data)
    elif doc_type == '–ó–ù–ó':
        return generate_znz_document(data)
    elif doc_type == '–ö–ü':
        return generate_kp_document(data)
    else:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}"

def generate_tz_document(data):
    general_requirements = data.get('general_requirements', [])
    quality_requirements = data.get('quality_requirements', [])
    
    content = f"""–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï
{data.get('title', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ')}

–£—Ç–≤–µ—Ä–∂–¥–∞—é:
{data.get('approver_position', '–ì–ª–∞–≤–Ω—ã–π –≤—Ä–∞—á')}
{data.get('organization', '–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}
___________________ {data.get('approver_name', '–ò.–ò. –ò–≤–∞–Ω–æ–≤')}

1. –û–ë–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø
"""
    
    for i, req in enumerate(general_requirements):
        if req and req.strip():
            content += f"1.{i+1}. {req}\n"
    
    content += "\n2. –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ß–ï–°–¢–í–£\n"
    for i, req in enumerate(quality_requirements):
        if req and req.strip():
            content += f"2.{i+1}. {req}\n"
    
    content += """
–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª:
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
___________________ –ü.–°. –ü–µ—Ç—Ä–æ–≤
"""
    return content

def generate_znz_document(data):
    technical_requirements = data.get('technical_requirements', [])
    
    content = f"""–ó–ê–î–ê–ù–ò–ï –ù–ê –ó–ê–ö–£–ü–ö–£
{data.get('title', '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É')}

–ó–∞–∫–∞–∑—á–∏–∫: {data.get('organization', '–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}
–ü—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø–∫–∏: {data.get('subject', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ')}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
"""
    
    for req in technical_requirements:
        if req and req.strip():
            content += f"- {req}\n"
    
    return content

def generate_kp_document(data):
    technical_proposal = data.get('technical_proposal', [])
    commercial_proposal = data.get('commercial_proposal', [])
    
    content = f"""–ö–û–ù–ö–£–†–°–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
{data.get('title', '–ö–æ–Ω–∫—É—Ä—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')}

–£—á–∞—Å—Ç–Ω–∏–∫: {data.get('participant', '–û–û–û –ö–æ–º–ø–∞–Ω–∏—è')}
–ü—Ä–µ–¥–º–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞: {data.get('subject', '–ü–æ—Å—Ç–∞–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')}

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
"""
    
    for item in technical_proposal:
        if item and item.strip():
            content += f"- {item}\n"
    
    content += "\n–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:\n"
    for item in commercial_proposal:
        if item and item.strip():
            content += f"- {item}\n"
    
    return content

@app.route('/api/download/<filename>')
@login_required()
def download_file(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        temp_dir = tempfile.gettempdir()
        filepath = os.path.join(temp_dir, filename)
        
        if not os.path.exists(filepath):
            return jsonify({
                'status': 'error',
                'message': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        from flask import send_file
        return send_file(filepath, as_attachment=True, download_name=filename)
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'
        }), 500

@app.route('/api/admin/documents', methods=['GET'])
@login_required(role='admin')
def get_documents_list():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        documents = getattr(assistant.kb, 'documents', [])
        unique_sources = {}
        
        for doc in documents:
            source = doc.get('source_file', 'unknown')
            if source not in unique_sources:
                unique_sources[source] = {
                    'documents': [],
                    'count': 0
                }
            unique_sources[source]['documents'].append({
                'question': doc.get('question', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'answer_preview': doc.get('answer', '')[:100] + '...' if len(doc.get('answer', '')) > 100 else doc.get('answer', '')
            })
            unique_sources[source]['count'] += 1
        
        return jsonify({
            'status': 'success',
            'data': {
                'total_documents': len(documents),
                'sources': unique_sources
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}'
        })

@app.route('/api/admin/documents/<source>', methods=['DELETE'])
@login_required(role='admin')
def delete_document_source(source):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        import urllib.parse
        source_filename = urllib.parse.unquote(source)
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        documents = getattr(assistant.kb, 'documents', [])
        initial_count = len(documents)
        assistant.kb.documents = [doc for doc in documents 
                                if doc.get('source_file') != source_filename]
        
        removed_count = initial_count - len(assistant.kb.documents)
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        if removed_count > 0 and hasattr(assistant.kb, 'build_index'):
            assistant.kb.build_index()
        
        return jsonify({
            'status': 'success',
            'data': {
                'message': f'–£–¥–∞–ª–µ–Ω–æ {removed_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_filename}',
                'removed_count': removed_count
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}'
        })

@app.route('/api/upload-documents', methods=['POST'])
@login_required(role='admin')
def upload_documents():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not assistant:
        return jsonify({
            'status': 'error',
            'message': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
    
    try:
        if 'files' not in request.files:
            return jsonify({
                'status': 'error',
                'message': '–§–∞–π–ª—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
            })
        
        files = request.files.getlist('files')
        uploaded_files = []
        skipped_files = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_dir = os.path.join(tempfile.gettempdir(), 'ai_assistant_uploads')
        os.makedirs(upload_dir, exist_ok=True)
        
        for file in files:
            if file.filename == '':
                continue
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if file.filename.lower().endswith(('.txt', '.pdf', '.docx', '.doc')):
                filename = os.path.join(upload_dir, file.filename)
                file.save(filename)
                uploaded_files.append(filename)
            else:
                skipped_files.append(file.filename)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        successful_uploads = 0
        for filepath in uploaded_files:
            try:
                if hasattr(assistant.kb, 'add_document_from_file'):
                    assistant.kb.add_document_from_file(filepath)
                    successful_uploads += 1
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(filepath)}")
                else:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ add_document_from_file –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {filepath}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if successful_uploads > 0 and hasattr(assistant.kb, 'build_index'):
            assistant.kb.build_index()
            print("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for filepath in uploaded_files:
            try:
                os.remove(filepath)
            except:
                pass
        
        return jsonify({
            'status': 'success',
            'data': {
                'message': f'–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful_uploads} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'uploaded_count': successful_uploads,
                'skipped_files': skipped_files,
                'total_documents': len(assistant.kb.documents) if hasattr(assistant.kb, 'documents') else 0
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}'
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ AI Assistant Web Server...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if initialize_assistant():
        print("‚úÖ AI Assistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI Assistant")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(debug=True, host='0.0.0.0', port=5000)